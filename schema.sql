create TYPE mood AS ENUM ('happy', 'sad', 'nostalgic', 'relaxing', 'energetic', 'angry', 'uplifting', 'calm', 'motivational', 'experimental');

create TYPE genre AS ENUM ('Jazz', 'Blues', 'RnB', 'Hip Hop', 'Country', 'Pop', 'Rock', 'Classical', 'Reggae', 'Folk', 'EDM', 'Indie', 'Metal', 'Soundtrack');

create TYPE feedback_type as ENUM ('sound quality', 'lyrics', 'vocals', 'melody', 'originality', 'overall');

create table
  public.albums (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    genre public.genre not null,
    artist_id bigint not null,
    release_date date not null default now(),
    constraint albums_pkey primary key (id),
    constraint albums_artist_id_fkey foreign key (artist_id) references users (id)
  ) tablespace pg_default;

create table
  public.songs (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    genre public.genre not null,
    duration integer not null,
    album_id bigint null,
    artist_id bigint not null,
    release_date date not null default now(),
    constraint songs_pkey primary key (id),
    constraint songs_album_id_fkey foreign key (album_id) references albums (id),
    constraint songs_artist_id_fkey foreign key (artist_id) references users (id),
    constraint songs_duration_check check ((duration > 0))
  ) tablespace pg_default;

create table
  public.users (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    email text null,
    password text not null,
    name text not null,
    user_type public.user_role not null,
    username text not null,
    salt text null,
    spotlight boolean not null default false,
    description text null,
    constraint users_pkey1 primary key (id),
    constraint users_email_key unique (email),
    constraint users_username_key unique (username)
  ) tablespace pg_default;

create table
  public.feedback (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    rating integer null,
    feedback_type public.feedback_type null,
    user_id bigint null,
    song_id bigint null,
    album_id bigint null,
    constraint feedback_pkey primary key (id),
    constraint feedback_album_id_fkey foreign key (album_id) references albums (id),
    constraint feedback_song_id_fkey foreign key (song_id) references songs (id),
    constraint feedback_user_id_fkey foreign key (user_id) references listeners (id)
  ) tablespace pg_default;

create table
  public.playlists (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    creator_id bigint null,
    title text not null,
    mood public.mood null,
    constraint playlists_pkey primary key (id),
    constraint playlists_creator_id_fkey foreign key (creator_id) references listeners (id)
  ) tablespace pg_default;

create table
  public.playlist_songs (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    playlist_id bigint null,
    song_id bigint null,
    constraint playlist_songs_pkey primary key (id),
    constraint playlist_songs_playlist_id_fkey foreign key (playlist_id) references playlists (id),
    constraint playlist_songs_song_id_fkey foreign key (song_id) references songs (id)
  ) tablespace pg_default;

create table
  public.mood_songs (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    mood public.mood null,
    song bigint null,
    constraint mood_songs_pkey primary key (id),
    constraint mood_songs_song_fkey foreign key (song) references songs (id)
  ) tablespace pg_default;

create table
  public.user_preferences (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id integer not null,
    preference text not null,
    preference_type public.preference_type not null,
    constraint user_preferences_pkey primary key (id)
  ) tablespace pg_default;

insert into artists (name, genre, email, password)
values
  (
    'Bill Wurtz',
    'Indie',
    'billwurtz@example.com',
    'DontGoToSchool'
  ),
  (
    'Billy Joel',
    'Pop',
    'billyjoel@gmail.com',
    'expassword'
  );

insert into listeners (name, username, email, password)
values
  (
    'John Doe',
    'johndoe',
    'johndoe@example.com',
    'password123'
  ),
  (
    'Jane Doe',
    'janedoe',
    'janedoe@example.com',
    'password456'
  ),
  (
    'Jake the Dog',
    'finnsfriend',
    'jakemertens@example.com',
    'BaconPancakes'
  );

insert into albums (artist_id, title, genre)
values
  (
    2,
    'The Stranger',
    'Pop'
  );

insert into songs (title, genre, duration, album_id, artist_id)
values
  (
    'Uptown Girl',
    'Pop',
    194,
    Null,
    2
  ),
  (
    'We Didnt Start The Fire',
    'Pop',
    287,
    1,
    2
  );

insert into feedback (rating, feedback_type, user_id, song_id)
values
  (
    5,
    'originality', 
    1, 
    2
  );

insert into
  feedback (rating, feedback_type, user_id, album_id)
values
  (
    3,
    'overall', 
    2, 
    1
  );